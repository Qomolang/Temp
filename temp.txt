逐字
各位评委老师大家好 我是18届研究生高松 我的论文题目是 多目标云资源调度问题建模与算法设计

第二页
        下面我将从主要研究内容 阶段性成果展示和下一步工作计划三个角度进行汇报
第三页
        首先是第一部分 主要研究内容的介绍

第四页
        本课题研究的主要内容从本质上来讲是云环境中任务调度或者说资源分配问题

        在云计算中，以用户的角度来看，只需要透明地交付任务给数据中心，而后等待结果返回
        然而云端需要面对所有用户提交的大量任务，评估任务特性和他们的资源需求，并进一步分配给虚拟计算节点，同时数据中心需要面对不同规格的物理机，并分割资源，产生多种类型的虚拟计算节点，以满足用户按需使用的需求，所以整个云资源调度问题可以分为两层，并由两个问题表述，一是如何将用户任务分配给合适虚拟计算节点的问题，二如何决定哪台物理机生成并处理相应的虚拟计算节点的问题

进入第五页 
            这种如何分配资源和调度任务的问题是云计算的核心问题之一，因为它直接影响系统性能和用户服务质量，然而云调度问题的有一些难点
            一方面 是因为多方要求的多样性，用户关注任务花费和执行时间；云服务商要保证服务质量和任务约束；数据中心要求电量消耗尽可能少，同时保证系统整体的负载均衡，使每台机器都有良好的使用率；这些不同的要求倾向的分配方案往往相冲突
            其次 这种困难也和云环境的复杂性有关
            从右侧上图可以看出不同的虚拟计算节点上，不同资源的相对占比和绝对总量都相差甚大，这导致任务在不同节点上的表现各异，这里以用户花费作为例子，可以看出同一任务在不同计算节点的用户花费是不同的
            同时规格各异的虚拟计算节点在主机上的分配方案也会影响整体表现，下图可以看出不同的资源分配方案使得同一数据中心的能量消耗也有不同
            这种云资源的复杂性和要求的多样性使得云调度往往难以描述并建立有效的调度方法

第六页
        针对以上问题，本课题的研究内容主要分为三点，一是建立边界明确的云模型，准确可靠地描述问题和多方要求，采用双层级调度结构，在不同层次满足不同的要求

        二是改进的多目标蚁群算法，研究任务-计算节点层次任务调度问题，利用蚁群算法鲁棒性强，可并行计算的特点，在可接受的时间内将任务分配给合适的计算节点上，得到任务总执行时间较少，用户花费较低，且系统负载较为均衡的方案

        三是在虚拟计算节点-物理机层次，采用基于动态阈值进行节点迁移的方法，使数据中心保持较高的物理资源利用率和较低的电量消耗


        目前本课题已完成前两步的工作，下面进入阶段性成果展示,
第七页  
        下面阶段性成果的展示内容主要为任务到虚拟计算节点层次的模型建立 算法设计以及结果分析

进入第八页
        第一部分是建立准确可靠的云模型，首先是云任务模型
           本课题采用map-reduce框架，用户提交的任务在到达云调度器前首先会做预处理，划分为一个个不可继续分割的独立子任务，并评估好资源需求,云调度的对象是不可继续分割的独立子任务，这些子任务接下来被分配到各种规格的虚拟计算节点之中，执行完毕后将重新组合并返回给用户
           

           为保证调度结果的有效性，提出两点假设：所有任务的都是准确的，也就是云端在评估时认为任务需要的资源量和任务在实际执行时需要的资源量是一致的，不会在执行过程中发现节点没有办法满足资源需求而导致重新分配；所有任务都是有效的，一经分配，到执行阶段不会因外界主观或客观的因素，比如用户突然发来终端命令或者节点故障，导致任务无效而需要重新分配。
进入第九页
        第二部分是云资源-花费模型
        资源模型为花费模型服务，我们这里主要考虑虚拟计算节点CPU和带宽

进入第十页 
        任务花费模型由两部分组成，分别为时间花费和传输花费，时间花费基于单个任务的完成时间，主要和任务长度以及节点计算能力也就是cpu有关；而传输花费则和文件大小以及带宽相关。
        另外在这里我们提出增量花费这一概念，也就是每个任务的总花费减去它在性能最佳节点的花费。这里左图是同一任务在不同资源节点上的总花费示意图，其中最左侧是该任务在性能最佳的计算节点上的花费，这实际上是该任务可能达到的最小花费。我们可以看出无论把该任务分配到哪一个节点都需要承担该部分，这部分花费和调度结果无关，可视为噪音，该部分占总花费的比率往往超过50%，会使得花费结果的变化不明显。为了更好地衡量调度方案对物理资源花费的影响，我们将以增量花费作为用户花费的衡量指标，该值越小，越表明调度方案在花费优化上的优越性。

第十一页 综上建立该层级多目标调度模型，同时考量任务总执行时间和用户花费，并任务调度过程中保证负载均衡 
这里我们用资源节点的任务完成时间的方差来衡量负载均衡程度

第十二页
        下一部分是调度算法研究部分，我们采用蚁群算法作为基础，并根据蚁群算法的缺点和云任务调度问题的特点对其进行优化，提出改进的多目标蚁群调度算法， 简称为IMOACO算法
        总体模型可表示为一个二部图，左侧为任务集合，右侧为虚拟计算节点集合，中间为任务到资源的边；因任务可能分配给任意节点，所以每个任务节点都连通到所有资源节点，而蚂蚁从一个任务节点i，选择边ij到达资源节点j，代表任务i分配给了资源节点j。而后蚂蚁将移动至下一个任务节点i+1继续进行边的选择，直到所有任务都分配完毕
        
第十三页
        下面讨论具体算法及改进内容。
        信息素是蚁群算法的核心之一，代表对历史信息的利用，标准蚁群算法对信息素初始化的方法是：对所有路径的信息素进行统一赋值，即只给这里的A值，这会导致初期搜索比较随机盲目，针对这一问题，我们进行初始化时进行两点改进，一是考虑节点资源分布情况，也就是资源越丰富的节点更有可能接收更多任务，二是以Minmin算法结果作为先验信息，利用其简单可靠的特点，对其产生的分配方案额外赋予一部分信息素，以提高初始阶段解的质量

        我们采取一种局部信息素更新策略来保证负载均衡，首先对当前分配结果进行负载水平评估，如果有节点的负载水平超出平均负载水平一定范围，则判为空载或者过载，接下来会动态调整与该节点相关所有路径的信息素水平，使负载在进一步的任务分配中达到平衡
第十四页
        节点选择方法决定任务会被分配到哪个虚拟计算节点
        蚂蚁依据信息素和启发式函数二者综合进行选择，这种综合代表确定性因素和随机性因素相互竞争和相互作用，这里的启发式信息综合考虑该任务的执行时间和增量花费两部分信息
        
        所有任务全部分配完毕后得到该轮产生的一个分配方案
        适应度函数代表对得到的分配方案的衡量标准，也就是我们对分配方案的一种期望，这里我们同时考虑任务执行时间和用户总花费两个目标

第十五页
        每轮所有蚂蚁的产生的分配方案会留下信息素，尽管结果更好的分配方案留下的信息素越多，但信息素的积累过程仍然比较缓慢，为了加速前期信息素的积累，采取精英策略，对一轮中最佳的分配方案赋予额外的信息素

        等一轮迭代结束后，会进行全局信息素更新，从而在下一轮影响任务分配到哪个节点上。
        这种依托于信息素的正反馈机制既是蚁群算法的优点，也是它的缺点
        在后期，信息素在某些路径上大量积累，会导致过度正反馈，而基本锁定该路径，而丧失了对其他路径的搜索能力，因此提出带自适应调节挥发因子的全局信息素更新策略，来规避蚁群算法的先天不足，避免后期因过度正反馈而导致陷入局部最优，从而使算法能更充分地搜索解空间。
        
第十六页
        下面进入实验及结果展示部分
        为更好地体现算法性能，在多种不同规模的任务集上进行实验
        实验任务集规模共分为5种，分别为100，200，400，600，800
        任务集采用符合高斯分布的随机任务生成器产生

        采用RR(轮询)和FCFS(首次匹配算法)和zuo等人在2015年提出的一种基于约束条件的多目标蚁群调度算法PBACO作为对照算法
十七页
        为体现真实环境中虚拟节点的多样性，创建多种不同规格的虚拟机


十八页
        图中黑色柱代表本课题提出的IMOACO算法，
        可以看出IMOACO在五个大小不同的数据集上任务总体完成时间都是最少的。这是IMOACO算法在信息素初始阶段使用了先验信息，提高了初始解的质量，并且在陷入停滞或进入搜索末期时采用了自适应调节挥发因子的策略使得其可以跳出局部最优，所以更容易找到全局最优解，相较其他算法，IMOACO在任务总时间上减少了11%-27%。

十九页  
        我们增量花费作为用户总花费的衡量标准。图2-4表示不同的调度方式在5种不同规模的任务集合下用户增量花费的比较结果，IMOACO的在用户花费方面的具有优势。随着任务规模的增大，这种优势越发明显，在任务规模为800时，对其他算法至少节省了13%的额外花费。PBACO以用户花费作为每次求解的约束之一，因此能对结果进行试探而减少花费，但在约束内并没有对资源分配做进一步的限制，而IMOACO的局部信息素调整策略，则使得任务在一定时间范围内多分配给了计算能力强的计算节点，所以总体花费更少，而FCFS算法的用户花费取决于数据中心中创建的虚拟节点情况，在小型节点占多数的时候，大量任务大概率不会被分配到高性能计算节点，所以性能不如RR算法。
        
二十页
        从图中可以看出，IMOACO算法在各个规模的任务上的表现都优于其他算法，这是因为FCFS算法在选择服务时只考虑资源利用率和分配速度，RR算法虽然考虑了负载均衡，但当需要服务时间较长和服务时间较短的任务同批到达，则会对负载均衡产生较大影响，PBACO算法并未将负载均衡作为主要目标，其负载均衡度的提升主要依靠获得的分配方案的解的质量提升，而IMOACO中则由局部信息素更新法则在任务选择资源节点时提供对负载平衡的导向性选择，故而随着任务规模的加大，可以明显看出IMOACO在负载均衡上的优势。

第二十二页
        下一步的工作主要是研究虚拟计算节点在物理机上的动态分配，这一步的调度问题和上一步的不同点主要在于：不同虚拟机的资源利用率会随着时间而发生持续的变化，